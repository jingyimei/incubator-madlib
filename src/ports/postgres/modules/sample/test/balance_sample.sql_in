/* ----------------------------------------------------------------------- *//**
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 *//* ----------------------------------------------------------------------- */

DROP TABLE IF EXISTS "TEST_s" cAScade;

CREATE TABLE "TEST_s"(
    id1 INTEGER,
    "ID2" INTEGER,
    gr1 INTEGER,
    gr2 INTEGER
);

INSERT INTO "TEST_s" VALUES
(1,0,1,1),
(2,0,1,1),
(3,0,1,1),
(4,0,1,1),
(5,0,1,1),
(6,0,1,1),
(7,0,1,1),
(8,0,1,1),
(9,0,1,1),
(19,0,1,1),
(29,0,1,1),
(39,0,1,1),
(0,1,1,2),
(0,2,1,2),
(0,3,1,2),
(0,4,1,2),
(0,5,1,2),
(0,6,1,2),
(10,10,2,2),
(20,20,2,2),
(30,30,2,2),
(40,40,2,2),
(50,50,2,2),
(60,60,2,2),
(70,70,2,2),
(10,10,5,5),
(50,50,5,5),
(88,88,5,5),
(40,40,5,6),
(50,50,5,6),
(60,60,5,6),
(70,70,5,6),
(10,10,6,6),
(60,60,6,6),
(30,30,6,6),
(40,40,6,6),
(50,50,6,6),
(60,60,6,6),
(70,70,6,6),
(50,50,4,2),
(60,60,4,2),
(70,70,4,2),
(50,50,3,2),
(60,60,3,2),
(70,70,3,2)
;

-- select balance_sample_help();

--- Test for random undersampling without replacement
DROP TABLE IF EXISTS out_s;
SELECT balance_sample('"TEST_s"', 'out_s', 'gr1', 'undersample', NULL, NULL, FALSE);
SELECT gr1, count(*) AS c FROM out_s GROUP BY gr1;
SELECT assert(count(*) = 0, 'Wrong number of samples on undersampling gr1') FROM
        (SELECT gr1, count(*) AS c FROM out_s GROUP BY gr1) AS foo WHERE foo.c != 3;

DROP TABLE IF EXISTS out_s1;
SELECT balance_sample('"TEST_s"', 'out_s1', 'gr2', 'undersample', NULL, NULL, FALSE);
-- SELECT gr2, count(*) AS c FROM out_s1 GROUP BY gr2;
SELECT assert(count(*) = 0, 'Wrong number of samples on undersampling gr2') FROM
        (SELECT gr2, count(*) AS c FROM out_s1 GROUP BY gr2) AS foo WHERE foo.c != 3;

-- --- Test for random undersampling with replacement
DROP TABLE IF EXISTS out_sr2;
SELECT balance_sample('"TEST_s"', 'out_sr2', 'gr1', 'undersample', NULL, NULL, TRUE);
-- SELECT gr1, count(*) AS c FROM out_sr2 GROUP BY gr1;
SELECT assert(count(*) = 0, 'Wrong number of samples on undersampling with replacement on gr1') FROM
        (SELECT gr1, count(*) AS c FROM out_sr2 GROUP BY gr1) AS foo WHERE foo.c != 3;

DROP TABLE IF EXISTS out_sr3;
SELECT balance_sample('"TEST_s"', 'out_sr3', 'gr2', 'undersample', NULL, NULL, TRUE);
SELECT assert(count(*) = 0, 'Wrong number of samples on undersampling with replacement on gr2') FROM
        (SELECT gr2, count(*) AS c FROM out_sr3 GROUP BY gr2) AS foo WHERE foo.c != 3;

-- --- Test for random oversampling
DROP TABLE IF EXISTS out_or3;
SELECT balance_sample('"TEST_s"', 'out_or3', 'gr1', 'oversample', NULL, NULL);
SELECT assert(count(*) = 0, 'Wrong number of samples on oversampling') FROM
        (SELECT gr1, count(*) AS c FROM out_or3 GROUP BY gr1) AS foo WHERE foo.c != 18;


--- UNIFORM sampling
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', 'uniform', NULL, NULL);
SELECT gr1, count(*) AS c FROM out_cd2 GROUP BY gr1;
SELECT assert(count(*) = 0, 'Wrong number of samples on uniform sampling for gr1') FROM
        (SELECT gr1, count(*) AS c FROM out_cd2 GROUP BY gr1) AS foo WHERE foo.c != 8;

--- repeate above with output_table_size = 100
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', 'uniform', 100, NULL);
SELECT gr1, count(*) AS c FROM out_cd2 GROUP BY gr1;
SELECT assert(count(*) = 0, 'Wrong number of samples on uniform sampling for gr1') FROM
        (SELECT gr1, count(*) AS c FROM out_cd2 GROUP BY gr1) AS foo WHERE foo.c != 17;

--- repeate above with output_table_size = 20
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', 'uniform', 20, NULL);
SELECT gr1, count(*) AS c FROM out_cd2 GROUP BY gr1;
SELECT assert(count(*) = 0, 'Wrong number of samples on uniform sampling for gr1') FROM
        (SELECT gr1, count(*) AS c FROM out_cd2 GROUP BY gr1) AS foo WHERE foo.c != 4;

--- UNIFORM sampling BY DEFAULT
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', NULL, NULL, NULL);
SELECT gr1, count(*) AS c FROM out_cd2 GROUP BY gr1;
SELECT assert(count(*) = 0, 'Wrong number of samples on uniform sampling for gr1') FROM
        (SELECT gr1, count(*) AS c FROM out_cd2 GROUP BY gr1) AS foo WHERE foo.c != 8;

--- repeate above with output_table_size = 100
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', NULL, 100, NULL);
SELECT gr1, count(*) AS c FROM out_cd2 GROUP BY gr1;
SELECT assert(count(*) = 0, 'Wrong number of samples on uniform sampling for gr1') FROM
        (SELECT gr1, count(*) AS c FROM out_cd2 GROUP BY gr1) AS foo WHERE foo.c != 17;

--- repeate above with output_table_size = 20
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', NULL, 20, NULL);
SELECT gr1, count(*) AS c FROM out_cd2 GROUP BY gr1;
SELECT assert(count(*) = 0, 'Wrong number of samples on uniform sampling for gr1') FROM
        (SELECT gr1, count(*) AS c FROM out_cd2 GROUP BY gr1) AS foo WHERE foo.c != 4;



--- Only one oversample
--- table size = 45
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', '2:10', NULL, NULL);
SELECT assert(count(*) = 48, 'Wrong number of samples on oversampling with comma-delimited list') from out_cd2;
SELECT assert(count(*) = 0, 'Wrong number of samples on oversampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 2) AS foo WHERE foo.c != 10;
SELECT assert(count(*) = 0, 'Wrong number of samples on oversampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 3) AS foo WHERE foo.c != 3;
SELECT assert(count(*) = 0, 'Wrong number of samples on oversampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 1) AS foo WHERE foo.c != 18;

--- repeate above with output_table_size = 50
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', '2:10', 50, NULL);
SELECT assert(count(*) >= 50, 'Wrong number of samples on oversampling with comma-delimited list') from out_cd2;
SELECT assert(count(*) = 0, 'Wrong number of samples on oversampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 2) AS foo WHERE foo.c != 10;
SELECT assert(count(*) = 0, 'Wrong number of samples on oversampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 3) AS foo WHERE foo.c != 8;
SELECT assert(count(*) = 0, 'Wrong number of samples on oversampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 1) AS foo WHERE foo.c != 8;





--- Only one undersamle
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', '1:10', NULL, NULL);
SELECT assert(count(*) = 37, 'Wrong number of samples on undersamling with comma-delimited list') from out_cd2;
SELECT assert(count(*) = 0, 'Wrong number of samples on undersamling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 2) AS foo WHERE foo.c != 7;
SELECT assert(count(*) = 0, 'Wrong number of samples on undersamling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 3) AS foo WHERE foo.c != 3;
SELECT assert(count(*) = 0, 'Wrong number of samples on undersamling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 1) AS foo WHERE foo.c != 10;

--- repeate above with output_table_size = 50
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', '1:10', 50, NULL);
SELECT assert(count(*) >= 50, 'Wrong number of samples on undersamling with comma-delimited list') from out_cd2;
SELECT assert(count(*) = 0, 'Wrong number of samples on undersamling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 2) AS foo WHERE foo.c != 8;
SELECT assert(count(*) = 0, 'Wrong number of samples on undersamling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 3) AS foo WHERE foo.c != 8;
SELECT assert(count(*) = 0, 'Wrong number of samples on undersamling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 1) AS foo WHERE foo.c != 10;




--- Test for class size specified in a comma-delimited list,
--- Only two oversample class
DROP TABLE IF EXISTS out_cd1;
SELECT balance_sample('"TEST_s"', 'out_cd1', 'gr1', '2:10,3:6', NULL, NULL);
SELECT assert(count(*) = 51, 'Wrong number of samples on oversampling with comma-delimited list') from out_cd1;
SELECT assert(count(*) = 0, 'Wrong number of samples on oversampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd1 where gr1 = 2) AS foo WHERE foo.c != 10;
SELECT assert(count(*) = 0, 'Wrong number of samples on oversampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd1 where gr1 = 3) AS foo WHERE foo.c != 6;
SELECT assert(count(*) = 0, 'Wrong number of samples on oversampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd1 where gr1 = 1) AS foo WHERE foo.c != 18;






--- Two oversample and one undersample class
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', '2:10,3:6,1:10', NULL, NULL);
SELECT assert(count(*) = 43, 'Wrong number of samples on sampling with comma-delimited list') from out_cd2;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 2) AS foo WHERE foo.c != 10;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 3) AS foo WHERE foo.c != 6;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 1) AS foo WHERE foo.c != 10;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 5) AS foo WHERE foo.c != 7;

--- repeate above with output_table_size = 100
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', '2:10,3:6,1:10', 100, NULL);
select gr1, count(*) from out_cd2 group by gr1;
SELECT assert(count(*) >= 100, 'Wrong number of samples on sampling with comma-delimited list') from out_cd2;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 2) AS foo WHERE foo.c != 10;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 4) AS foo WHERE foo.c != 25;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 1) AS foo WHERE foo.c != 10;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 5) AS foo WHERE foo.c != 25;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 3) AS foo WHERE foo.c != 6;

--- Sample everyclass in customized
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', '2:10,3:6,1:10,4:5,5:8,6:8', NULL, NULL);
SELECT assert(count(*) = 47, 'Wrong number of samples on sampling with comma-delimited list') from out_cd2;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 2) AS foo WHERE foo.c != 10;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 3) AS foo WHERE foo.c != 6;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 1) AS foo WHERE foo.c != 10;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 4) AS foo WHERE foo.c != 5;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 5) AS foo WHERE foo.c != 8;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 6) AS foo WHERE foo.c != 8;

--- repeate above with output_table_size = 100
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', '2:10,3:6,1:10,4:5,5:8,6:8', 100, NULL);
SELECT assert(count(*) = 47, 'Wrong number of samples on sampling with comma-delimited list') from out_cd2;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 2) AS foo WHERE foo.c != 10;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 3) AS foo WHERE foo.c != 6;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 1) AS foo WHERE foo.c != 10;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 4) AS foo WHERE foo.c != 5;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 5) AS foo WHERE foo.c != 8;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 6) AS foo WHERE foo.c != 8;



---- TEST for Only Fraction values

---- CASE When output_table_size is not NUll
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', '2:0.1', 50, NULL);
---sample 2 to 0.1*50 = 5
---remaining samples (table size)45 - (size of 2)7 + (sampled size of 2)5 = 46
---uniformly sample rest classes by 46/5 = 9
SELECT assert(count(*) >= 50, 'Wrong number of samples on sampling with comma-delimited list') from out_cd2;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 2) AS foo WHERE foo.c != 5;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 1) AS foo WHERE foo.c != 9;


DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', '2:0.1,3:0.4', 15, NULL);
---sample 2 to 0.1*40 = 4
---sample 3 to 0.4*40 = 16
---remaining samples (table size)48 - (size of 2)7 - (size of 3)3  + (sampled size of 2,3)4+16 = 58 > 40
--- Desired sample size is greater than specified --> Should ERROR out.
--- TODO : CHECK for errors here.



DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', '2:0.1,3:0.2,5:0.2', 100, NULL);
---sample 2 to 0.1*100 = 10
---sample 3 to 0.2*100 = 20
---sample 5 to 0.2*100 = 20
---remaining samples (table size)100 - (sampled size of 2,3,5) 50 > 100
--- resample remaining into 50.
--- ceil(50/3) = 17
select * from out_cd2;
SELECT assert(count(*) >= 100, 'Wrong number of samples on sampling with comma-delimited list') from out_cd2;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 2) AS foo WHERE foo.c != 10;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 3) AS foo WHERE foo.c != 20;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 5) AS foo WHERE foo.c != 20;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 1) AS foo WHERE foo.c != 17;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 4) AS foo WHERE foo.c != 17;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 6) AS foo WHERE foo.c != 17;




---- CASE When output_table_size == NULL
-- means:
-- .4x + 10M + 1M = x
-- where x=computed output_table_size
-- solve for x to get x=18.3M
-- rest classes remain as is.
---
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', '2:0.1', NULL, NULL);
--- sum of class counts (except 2) is 38 {numeric_value_sum in python code}
--- numeric_value_sum = 38
---\ 0.1 * x + 38 = x => ceil -> 43
--- round(0.1 * 46) = 4.
---(table size)45 - (size of 2)7 + (sampled size of 2)4 = 45
--- rest classes will be send as is.
select * from out_cd2;
SELECT assert(count(*) = 42, 'Wrong number of samples on sampling with comma-delimited list') from out_cd2;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 2) AS foo WHERE foo.c != 4;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 1) AS foo WHERE foo.c != 18;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 3) AS foo WHERE foo.c != 3;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 4) AS foo WHERE foo.c != 3;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 5) AS foo WHERE foo.c != 7;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 6) AS foo WHERE foo.c != 7;



--- Sample ratio sum == 1.0
--- The fraction sum value = 1.0 => sample should only have 2,3 and 5 classes and no other samples
DROP TABLE IF EXISTS out_cd2;
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', '2:0.1,3:0.4,5:0.5', NULL, NULL);
--- Sample ratio sum == 1.0
--- sample 2 to round(0.1*45) = 5
--- sample 3 to round(0.4*45) =  18
--- sample 5 to round(0.5*45) =  23
--- Sample size : (sampled size of 2, 3, 5) 5 + 18 + 23 = 46
--- Only 2,3 and 5 will exist with above mentioned sample counts.
--select * from out_cd2 order by gr1;
SELECT assert(count(*) >= 45, 'Wrong number of samples on sampling with comma-delimited list') from out_cd2;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 2) AS foo WHERE foo.c != 5;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 3) AS foo WHERE foo.c != 18;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 5) AS foo WHERE foo.c != 23;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 1) AS foo WHERE foo.c != 0;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 4) AS foo WHERE foo.c != 0;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 6) AS foo WHERE foo.c != 0;


---.4x + 10M + 1M = x
-- where x=computed output_table_size

-- solve for x to get x=18.3M

DROP TABLE IF EXISTS out_cd2;
--  3:11,2:6,5:11
--- sample 2 to round(0.1*56) = 6
--- sample 3 to round(0.2*56) =  11
--- sample 5 to round(0.2*56) =  11
--- Sample size : (sampled size of 2, 3, 5) 5 + 18 + 23 = 46
SELECT balance_sample('"TEST_s"', 'out_cd2', 'gr1', '2:0.1,3:0.2,5:0.2', NULL, NULL);
SELECT assert(count(*) >= 56, 'Wrong number of samples on sampling with comma-delimited list') from out_cd2;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 2) AS foo WHERE foo.c != 6;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 3) AS foo WHERE foo.c != 11;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 5) AS foo WHERE foo.c != 11;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 1) AS foo WHERE foo.c != 18;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 4) AS foo WHERE foo.c != 3;
SELECT assert(count(*) = 0, 'Wrong number of samples on sampling with comma-delimited list') from
        (SELECT count(*) AS c FROM out_cd2 where gr1 = 6) AS foo WHERE foo.c != 7;








